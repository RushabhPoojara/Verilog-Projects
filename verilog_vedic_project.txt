// Code your design here
// Code your design here


module adder( a,b,sum,carry); 
  input a,b;
  output sum, carry;
  xor G1 (sum, a,b);
  and G2 (carry,a,b);
endmodule

//Behavioural description of 2-bit multiplier
module veda2x2 ( a,b,c); //2x2 multiplier 
  input [1:0] a,b;
  output [3:0] c;
  wire [3:0] c;
  wire [3:0] temp;
  
  assign c[0] = a[0]&b[0]; //The LSB of output will be product of a[0] and b[0]
  
  assign temp[0] = a[1]&b[0];
  assign temp[1] = a[0]&b[1];
  assign temp[2] = a[1]&b[1];
  
  // The index 1 element will be addition of temp0 and temp1
  adder( temp[0], temp[1], c[1], temp[3]);
  
  //index 2 element will be result of addition of temp2 and temp3
  //index 3 element will be the carry of the addition of temp2 and temp3
  
  adder(temp[2], temp[3] , c[2] , c[3]);
  
endmodule

module adder_4_bit (a,b,sum); //4-bit adder
  input [3:0] a,b;
  output [7:0] sum;
  wire [7:0] sum;
  assign sum = a+b;
endmodule

module adder_6_bit (a,b,sum); //6-bit adder
  input [5:0] a,b;
  output [11:0] sum;
  wire [11:0] sum;
  assign sum = a+b;
endmodule

module veda4x4(a,b,c);
  input [3:0] a,b;
  output [7:0] c;
  wire [7:0] c;
  wire [3:0] q0,q1,q2,q3,q4;
  wire [5:0] q5,q6;
  wire [3:0] temp0;
  wire [5:0] temp1,temp2,temp3;
  	
  //Now we will multiply in the same manner but now with 2x2 multiplication i.e a[1:0] and b[1:0]
  
  
  veda2x2 M1 ( a[1:0], b[1:0], q0[3:0]);
  veda2x2 M2 ( a[3:2] , b[1:0], q1[3:0]);
  veda2x2 M3 ( a[1:0], b[3:2], q2[3:0]);
  veda2x2 M4 ( a[3:2], b[3:2], q3[3:0]);
  
  //Now we will add first two MSB terms of q0 with q1 and q3 with q2 
  
  
  assign temp0 = { 2'b0, q0[3:2] };
  adder_4_bit M5 ( q1[3:0] , temp0, q4);
  assign temp1 = { 2'b0, q2[3:0]};
  assign temp2 = { q3[3:0], 2'b0};
  
  adder_6_bit M6 ( temp2 , temp3, q5 );
  
  //Now we will add q4 and q5 to get the final result q6
  
  assign temp3 = { 2'b0 , q4[3:0] };
  adder_6_bit M7 ( temp3, q5 , q6);
  
  //The final result is assigned to c
  
  assign c[1:0] = q0[1:0];
  assign c[7:2] = q6[5:0];
endmodule


module adder_8_bit (a,b,sum);
  input [7:0] a,b;
  output [15:0] sum;
  assign sum = a+b;
endmodule

module adder_12_bit (a,b,sum);
  input [11:0] a,b;
  output [23:0] sum;
  assign sum = a+b;
endmodule

module veda8x8(a,b,c);
  
  input [7:0] a,b;
  output [15:0] c;
  
  wire [15:0] c;
  wire [7:0] q0,q1,q2,q3,q4;
  wire [11:0] q5,q6;
  wire [7:0] temp0;
  wire [11:0] temp1,temp2,temp3;
  
  
  //Now we will multiply in the same manner but now with 4x4 multiplication i.e a[3:0] and b[3:0]
  
  veda4x4 A1 ( a[3:0] , b[3:0] , q0[7:0] );
  veda4x4 A2 ( a[3:0], b[7:4], q1[7:0] );
  veda4x4 A3 ( a[7:4], b[3:0] , q2[7:0] );
  veda4x4 A4 ( a[7:4], b[7:4] , q3[7:0] );
  
  //As we have done till now, we will multiply first four MSB of q0 with q1 and q3 with q2
  
  assign temp0 = { 4'b0 , q0[7:4]};
  adder_8_bit A5 (q1[7:0], temp0, q4);
  assign temp1 = {4'b0,q2[7:0]};
  assign temp2 = {q3[7:0], 4'b0};
  adder_12_bit A6 (temp1,temp2,q5);
  assign temp3 = { 4'b0,q4[7:0]};
                 
  

  adder_12_bit A7(temp3,q5,q6);


  assign c[3:0] = q0[3:0];
  assign c[15:0] = q6[11:0];
  
  endmodule

// Code your testbench here
// or browse Examples
  module test_vedic_8x8;
	reg [7:0] a;
	reg [7:0] b;

	wire [15:0] c;

	// Instantiate the Unit Under Test (UUT)
	veda8X8 uut(.a(a),.b(b), .c(c));

	initial begin
	$monitor($time," a= %b, b=%b,  --- c= %b\n", 
              a, b, c);
		a = 0;
		b = 0;
		#100;
		
		a = 8'd255;
		b = 8'd255;
		#100;
		
		a = 8'd5;
		b = 8'd3;
		#100;
		
		a = 8'd4;
		b = 8'd2;
		#100;
		
		a = 8'd2;
		b = 8'd2;
		#100;
		
		a = 8'd6;
		b = 8'd8;
		#100;
        
		

	end
      
endmodule





     
  
  
  
  
  
  
  